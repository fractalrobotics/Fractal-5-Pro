[include mainsail.cfg]
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_2A0039001751313431393536-if00

[virtual_sdcard]
path: /home/alpha/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[save_variables]
filename: ~/printer_data/config/saved_variables.cfg

[force_move] 
enable_force_move: true

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[idle_timeout]
timeout: 999999  # Set the timeout in seconds

# Driver0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
microsteps: 32
rotation_distance: 40
full_steps_per_rotation:200
endstop_pin: !PG6
position_endstop: 150.0 # Updated after manual X calibration
position_min: -150.0
position_max: 150.0
homing_speed: 20
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC4
##diag_pin: PG6 # Keep commented, since this uses a limit switch
run_current: 0.800
stealthchop_threshold: 0 #999999

# Driver1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
microsteps: 32
rotation_distance: 40
full_steps_per_rotation:200
endstop_pin: !PG9
position_endstop: -297.05 # Updated after manual Y calibration
position_min: -297.05
position_max: 152.95
homing_speed: 20
homing_positive_dir: false

[tmc2209 stepper_y]
uart_pin: PD11
##diag_pin: PG9 # Keep commented, since this uses a limit switch
run_current: 0.800
stealthchop_threshold: 0 #999999

# Driver2
[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
microsteps: 32
rotation_distance: 8
endstop_pin: tmc2209_stepper_z:virtual_endstop
position_endstop: -150.0
position_min: -150.0
position_max: 250.0
homing_retract_dist: 0
homing_speed: 10

[tmc2209 stepper_z]
uart_pin: PC6
diag_pin: PG10
run_current: 0.800
stealthchop_threshold: 0 #999999
driver_SGTHRS: 70 # 255 = Most Sensitive, 0 = Least Sensitive

# Driver3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA2
microsteps: 32
rotation_distance: 8
endstop_pin: tmc2209_stepper_z1:virtual_endstop
#position_endstop: 0
#position_max: 200
#homing_retract_dist: 0

[tmc2209 stepper_z1]
uart_pin: PC7
diag_pin: PG11
run_current: 0.800
stealthchop_threshold: 0 #999999
driver_SGTHRS: 65 # 255 = Most Sensitive, 0 = Least Sensitive

# Driver4
[stepper_z2]
step_pin: PF9
dir_pin: !PF10
enable_pin: !PG2
microsteps: 32
rotation_distance: 8
endstop_pin: tmc2209_stepper_z2:virtual_endstop
#position_endstop: 0
#position_max: 200
#homing_retract_dist: 0

[tmc2209 stepper_z2]
uart_pin: PF2
diag_pin: PG12
run_current: 0.800
stealthchop_threshold: 0 #999999
driver_SGTHRS: 70 # 255 = Most Sensitive, 0 = Least Sensitive

# Driver5
[manual_stepper stepper_a]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
microsteps: 32
rotation_distance: 90
#   See the "stepper" section for a description of these parameters.
velocity: 10
#   Set the default velocity (in mm/s) for the stepper. This value
#   will be used if a MANUAL_STEPPER command does not specify a SPEED
#   parameter. The default is 5mm/s.
accel: 100
#   Set the default acceleration (in mm/s^2) for the stepper. An
#   acceleration of zero will result in no acceleration. This value
#   will be used if a MANUAL_STEPPER command does not specify an ACCEL
#   parameter. The default is zero.
#endstop_pin:
#   Endstop switch detection pin. If specified, then one may perform
#   "homing moves" by adding a STOP_ON_ENDSTOP parameter to
#   MANUAL_STEPPER movement commands.

[tmc2209 manual_stepper stepper_a]
uart_pin: PE4
run_current: 0.400
stealthchop_threshold: 0 #999999

# Driver6
[manual_stepper stepper_b]
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
microsteps: 16
rotation_distance: 24
#   See the "stepper" section for a description of these parameters.
velocity: 20
#   Set the default velocity (in mm/s) for the stepper. This value
#   will be used if a MANUAL_STEPPER command does not specify a SPEED
#   parameter. The default is 5mm/s.
accel: 100
#   Set the default acceleration (in mm/s^2) for the stepper. An
#   acceleration of zero will result in no acceleration. This value
#   will be used if a MANUAL_STEPPER command does not specify an ACCEL
#   parameter. The default is zero.
endstop_pin: !PG13
#   Endstop switch detection pin. If specified, then one may perform
#   "homing moves" by adding a STOP_ON_ENDSTOP parameter to
#   MANUAL_STEPPER movement commands.

[tmc2209 manual_stepper stepper_b]
uart_pin: PE1
run_current: 0.800
stealthchop_threshold: 0 #999999

# Driver7
[extruder]
step_pin: PE6
dir_pin: PA14
enable_pin: !PE0
microsteps: 32
rotation_distance: 5.700
nozzle_diameter: 0.600
filament_diameter: 1.750
heater_pin: PA0 # HE0
sensor_pin:  PF4 # T0
sensor_type: ATC Semitec 104GT-2
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 260
max_extrude_only_distance: 9999
max_extrude_cross_section: 9999
min_extrude_temp: 0

[tmc2209 extruder]
uart_pin: PD3
run_current: 0.650
stealthchop_threshold: 0 #999999

[heater_bed]
heater_pin: PA1
sensor_pin: PF3 # TB
sensor_type: EPCOS 100K B57560G104F
control: pid
pid_Kp: 24.42
pid_Ki: 0.35
pid_Kd: 0
min_temp: 0
max_temp: 130

[heater_fan fan0]
# Turbo Fan (FAN0)
pin: PA8
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
#off_below: 0.0

[heater_fan fan1]
# Hotend Fan (FAN1)
pin: PE5
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[heater_fan fan2]
# Front Left Electronics Fan (FAN2)
pin: PD12
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 0.5
heater: heater_bed

[heater_fan fan3]
# Back Left Electronics Fan (FAN3)
pin: PD13
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 0.5
heater: heater_bed

[heater_fan fan4]
# Back Right Electronics Fan (FAN4)
pin: PD14
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 0.5
heater: heater_bed

[controller_fan fan5]
# Front Right Electronics Fan (FAN5)
pin: PD15
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 0.5
heater: heater_bed

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5

# See the sample-lcd.cfg file for definitions of common LCD displays.

[probe]
pin: PG15

x_offset: 28.0
y_offset: -24.0
z_offset: 3.65 # 3.65 is with the spring steel build surface, -1.38 is with the 1/16" G10, +0.5 is with just blue tape
speed: 2.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.05 #0.008
samples_tolerance_retries: 3

# CUSTOM GCODE MACROS

[gcode_macro home_ab]
gcode:
  MANUAL_STEPPER STEPPER=stepper_a ENABLE=1
  MANUAL_STEPPER STEPPER=stepper_b ENABLE=1
  MANUAL_STEPPER STEPPER=stepper_a SET_POSITION=0
  MANUAL_STEPPER STEPPER=stepper_b SET_POSITION=0
  MANUAL_STEPPER STEPPER=stepper_b MOVE=-100 SPEED=10 SYNC=1 STOP_ON_ENDSTOP=1 # Move B into limit switch
  MANUAL_STEPPER STEPPER=stepper_b SET_POSITION=-1.8
  MANUAL_STEPPER STEPPER=stepper_b MOVE=0 SPEED=5 SYNC=1

### DIAGONAL CENTERING MACROS
[gcode_macro PROBE_STATE_FL0]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.fl0_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=fl0_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=fl0x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=fl0y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_FL0]
description: Get XY coordinates of Front-Left point 0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set flx_starting_position = -sin45*start_radius + x_probe_offset %}
    {% set fly_starting_position = -sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = sin45*increment %}
    {% set y_increment = sin45*increment %}

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G0 F{move_speed*60} X{flx_starting_position} Y{fly_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update fl0x and fl0y variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_FL0
        PROBE_STATE_FL0
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=fl0_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_BR0]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.br0_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=br0_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=br0x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=br0y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_BR0]
description: Get XY coordinates of Back-Right point 0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set brx_starting_position = sin45*start_radius + x_probe_offset %}
    {% set bry_starting_position = sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = -(sin45*increment) %}
    {% set y_increment = -(sin45*increment) %}
    

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G91 # Set to relative positioning
    MANUAL_STEPPER STEPPER=stepper_a MOVE=180.0 SPEED=15.0 SYNC=1            # Rotate Build Surface 180 Degrees
    G90  # Set back to absolute positioning
    G0 F{move_speed*60} X{brx_starting_position} Y{bry_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update br0x and br0y variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_BR0
        PROBE_STATE_BR0
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=br0_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro CALCULATE_DIAG_CORRECTION_0]
gcode:
    
    # Calculate diagonal correction:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set increment = svv.increment %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set fl_sensor_radius = svv.fl_sensor_radius %}
    {% set br_sensor_radius = svv.br_sensor_radius %}
    {% set fl0x = svv.fl0x - sin45*increment - x_probe_offset %}    # Need to subtract increment here; the variable only gets updated after an increment has passed
    {% set fl0y = svv.fl0y - sin45*increment - y_probe_offset %}
    {% set br0x = svv.br0x + sin45*increment - x_probe_offset %}    # Need to add increment here; the variable only gets updated after an increment has passed
    {% set br0y = svv.br0y + sin45*increment - y_probe_offset %}
    {% set r1 = (fl0x**2 + fl0y**2)**0.5 - fl_sensor_radius%}
    {% set r2 = (br0x**2 + br0y**2)**0.5 - br_sensor_radius%}
    {% set delta_diag = (r2-r1)/2.0 %}
    {% set x_offset = sin45*delta_diag %}
    {% set y_offset = sin45*delta_diag %}
    {% set move_speed = svv.move_speed %}

    SAVE_VARIABLE VARIABLE=x_correction_0 VALUE={sin45*delta_diag}
    SAVE_VARIABLE VARIABLE=y_correction_0 VALUE={sin45*delta_diag}

    SAVE_VARIABLE VARIABLE=r1_0 VALUE={r1}
    SAVE_VARIABLE VARIABLE=r2_0 VALUE={r2}

    #RESPOND MSG="r1: {r1}"
    #RESPOND MSG="r2: {r2}"
    #RESPOND MSG="diag_correction_0: {delta_diag}"

    G90
    G0 F{move_speed*60} Z6.0
    G0 F{move_speed*60} X{x_offset} Y{y_offset}
    SET_KINEMATIC_POSITION X=0.0 Y=0.0

[gcode_macro PROBE_STATE_FR1]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.fr1_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=fr1_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=fr1x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=fr1y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_FR1]
description: Get XY coordinates of Front-Right point 1
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set frx_starting_position = sin45*start_radius + x_probe_offset %}
    {% set fry_starting_position = -sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = -(sin45*increment) %}
    {% set y_increment = sin45*increment %}

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G0 F{move_speed*60} X{frx_starting_position} Y{fry_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_FR1
        PROBE_STATE_FR1
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=fr1_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_BL1]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.bl1_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=bl1_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=bl1x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=bl1y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_BL1]
description: Get XY coordinates of Back-Left point 1
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set blx_starting_position = -sin45*start_radius + x_probe_offset %}
    {% set bly_starting_position = sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = sin45*increment %}
    {% set y_increment = -(sin45*increment) %}
    

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G91 # Set to relative positioning
    MANUAL_STEPPER STEPPER=stepper_a MOVE=0.0 SPEED=15.0 SYNC=1            # Rotate Build Surface 180 Degrees
    G90  # Set back to absolute positioning
    G0 F{move_speed*60} X{blx_starting_position} Y{bly_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_BL1
        PROBE_STATE_BL1
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=bl1_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro CALCULATE_DIAG_CORRECTION_1]
gcode:
    
    # Calculate diagonal correction:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set increment = svv.increment %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set fr_sensor_radius = svv.fr_sensor_radius %}
    {% set bl_sensor_radius = svv.bl_sensor_radius %}
    {% set fr1x = svv.fr1x + sin45*increment - x_probe_offset %}
    {% set fr1y = svv.fr1y - sin45*increment - y_probe_offset %}
    {% set bl1x = svv.bl1x - sin45*increment - x_probe_offset %}
    {% set bl1y = svv.bl1y + sin45*increment - y_probe_offset %}
    {% set r1 = (fr1x**2 + fr1y**2)**0.5 - fr_sensor_radius %}
    {% set r2 = (bl1x**2 + bl1y**2)**0.5 - bl_sensor_radius %}
    {% set delta_diag = (r2-r1)/2.0 %}
    {% set x_offset = -sin45*delta_diag %}
    {% set y_offset = sin45*delta_diag %}
    {% set move_speed = svv.move_speed %}

    SAVE_VARIABLE VARIABLE=x_correction_1 VALUE={sin45*delta_diag}
    SAVE_VARIABLE VARIABLE=y_correction_1 VALUE={sin45*delta_diag}

    SAVE_VARIABLE VARIABLE=r1_1 VALUE={r1}
    SAVE_VARIABLE VARIABLE=r2_1 VALUE={r2}

    #RESPOND MSG="r1: {r1}"
    #RESPOND MSG="r2: {r2}"
    #RESPOND MSG="diag_correction_1: {delta_diag}"

    G90
    G0 F{move_speed*60} Z6.0
    G0 F{move_speed*60} X{x_offset} Y{y_offset}
    SET_KINEMATIC_POSITION X=0.0 Y=0.0

[gcode_macro PROBE_STATE_FL1]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.fl1_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=fl1_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=fl1x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=fl1y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_FL1]
description: Get XY coordinates of Front-Left point 1
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set flx_starting_position = -sin45*start_radius + x_probe_offset %}
    {% set fly_starting_position = -sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = sin45*increment %}
    {% set y_increment = sin45*increment %}

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G0 F{move_speed*60} X{flx_starting_position} Y{fly_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_FL1
        PROBE_STATE_FL1
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=fl1_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_BR1]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.br1_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=br1_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=br1x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=br1y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_BR1]
description: Get XY coordinates of Back-Right point 1
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set brx_starting_position = sin45*start_radius + x_probe_offset %}
    {% set bry_starting_position = sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = -(sin45*increment) %}
    {% set y_increment = -(sin45*increment) %}
    

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G91 # Set to relative positioning
    MANUAL_STEPPER STEPPER=stepper_a MOVE=180.0 SPEED=15.0 SYNC=1            # Rotate Build Surface 180 Degrees
    G90  # Set back to absolute positioning
    G0 F{move_speed*60} X{brx_starting_position} Y{bry_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_BR1
        PROBE_STATE_BR1
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=br1_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro CALCULATE_DIAG_CORRECTION_2]
gcode:
    
    # Calculate diagonal correction:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set increment = svv.increment %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set fl_sensor_radius = svv.fl_sensor_radius %}
    {% set br_sensor_radius = svv.br_sensor_radius %}
    {% set fl1x = svv.fl1x - sin45*increment - x_probe_offset %}    # Need to subtract increment here; the variable only gets updated after an increment has passed
    {% set fl1y = svv.fl1y - sin45*increment - y_probe_offset %}
    {% set br1x = svv.br1x + sin45*increment - x_probe_offset %}    # Need to add increment here; the variable only gets updated after an increment has passed
    {% set br1y = svv.br1y + sin45*increment - y_probe_offset %}
    {% set r1 = (fl1x**2 + fl1y**2)**0.5 - fl_sensor_radius %}
    {% set r2 = (br1x**2 + br1y**2)**0.5 - br_sensor_radius %}
    {% set delta_diag = (r2-r1)/2.0 %}
    {% set x_offset = sin45*delta_diag %}
    {% set y_offset = sin45*delta_diag %}
    {% set move_speed = svv.move_speed %}

    SAVE_VARIABLE VARIABLE=x_correction_2 VALUE={sin45*delta_diag}
    SAVE_VARIABLE VARIABLE=y_correction_2 VALUE={sin45*delta_diag}

    SAVE_VARIABLE VARIABLE=r1_2 VALUE={r1}
    SAVE_VARIABLE VARIABLE=r2_2 VALUE={r2}

    #RESPOND MSG="r1: {r1}"
    #RESPOND MSG="r2: {r2}"
    #RESPOND MSG="diag_correction_2: {delta_diag}"

    G90
    G0 F{move_speed*60} Z6.0
    G0 F{move_speed*60} X{x_offset} Y{y_offset}
    SET_KINEMATIC_POSITION X=0.0 Y=0.0

[gcode_macro PROBE_STATE_FR2]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.fr2_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=fr2_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=fr2x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=fr2y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_FR2]
description: Get XY coordinates of Front-Right point 2
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set frx_starting_position = sin45*start_radius + x_probe_offset %}
    {% set fry_starting_position = -sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = -(sin45*increment) %}
    {% set y_increment = sin45*increment %}

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G0 F{move_speed*60} X{frx_starting_position} Y{fry_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_FR2
        PROBE_STATE_FR2
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=fr2_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_BL2]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.bl2_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=bl2_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=bl2x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=bl2y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_BL2]
description: Get XY coordinates of Back-Left point 2
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set blx_starting_position = -sin45*start_radius + x_probe_offset %}
    {% set bly_starting_position = sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = sin45*increment %}
    {% set y_increment = -(sin45*increment) %}
    

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G91 # Set to relative positioning
    MANUAL_STEPPER STEPPER=stepper_a MOVE=0.0 SPEED=15.0 SYNC=1            # Rotate Build Surface 180 Degrees
    G90  # Set back to absolute positioning
    G0 F{move_speed*60} X{blx_starting_position} Y{bly_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_BL2
        PROBE_STATE_BL2
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=bl2_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro CALCULATE_DIAG_CORRECTION_3]
gcode:
    
    # Calculate diagonal correction:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set increment = svv.increment %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set fr_sensor_radius = svv.fr_sensor_radius %}
    {% set bl_sensor_radius = svv.bl_sensor_radius %}
    {% set fr2x = svv.fr2x + sin45*increment - x_probe_offset %}
    {% set fr2y = svv.fr2y - sin45*increment - y_probe_offset %}
    {% set bl2x = svv.bl2x - sin45*increment - x_probe_offset %}
    {% set bl2y = svv.bl2y + sin45*increment - y_probe_offset %}
    {% set r1 = (fr2x**2 + fr2y**2)**0.5 - fr_sensor_radius %}
    {% set r2 = (bl2x**2 + bl2y**2)**0.5 - bl_sensor_radius %}
    {% set delta_diag = (r2-r1)/2.0 %}
    {% set x_offset = -sin45*delta_diag %}
    {% set y_offset = sin45*delta_diag %}
    {% set move_speed = svv.move_speed %}

    SAVE_VARIABLE VARIABLE=x_correction_3 VALUE={sin45*delta_diag}
    SAVE_VARIABLE VARIABLE=y_correction_3 VALUE={sin45*delta_diag}

    SAVE_VARIABLE VARIABLE=r1_3 VALUE={r1}
    SAVE_VARIABLE VARIABLE=r2_3 VALUE={r2}

    #RESPOND MSG="r1: {r1}"
    #RESPOND MSG="r2: {r2}"
    #RESPOND MSG="diag_correction_3: {delta_diag}"

    G90
    G0 F{move_speed*60} Z6.0
    G0 F{move_speed*60} X{x_offset} Y{y_offset}
    SET_KINEMATIC_POSITION X=0.0 Y=0.0

[gcode_macro PROBE_STATE_FL2]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.fl2_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=fl2_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=fl2x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=fl2y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_FL2]
description: Get XY coordinates of Front-Left point 2
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set flx_starting_position = -sin45*start_radius + x_probe_offset %}
    {% set fly_starting_position = -sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = sin45*increment %}
    {% set y_increment = sin45*increment %}

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G0 F{move_speed*60} X{flx_starting_position} Y{fly_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_FL2
        PROBE_STATE_FL2
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=fl2_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_BR2]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.br2_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=br2_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=br2x VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=br2y VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_BR2]
description: Get XY coordinates of Back-Right point 2
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set start_radius = svv.start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set brx_starting_position = sin45*start_radius + x_probe_offset %}
    {% set bry_starting_position = sin45*start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set max_distance = svv.max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = -(sin45*increment) %}
    {% set y_increment = -(sin45*increment) %}
    

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G91 # Set to relative positioning
    MANUAL_STEPPER STEPPER=stepper_a MOVE=180.0 SPEED=15.0 SYNC=1            # Rotate Build Surface 180 Degrees
    G90  # Set back to absolute positioning
    G0 F{move_speed*60} X{brx_starting_position} Y{bry_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_BR2
        PROBE_STATE_BR2
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=br2_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro CALCULATE_DIAG_CORRECTION_4]
gcode:
    
    # Calculate diagonal correction:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set increment = svv.increment %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set fl_sensor_radius = svv.fl_sensor_radius %}
    {% set br_sensor_radius = svv.br_sensor_radius %}
    {% set fl2x = svv.fl2x - sin45*increment - x_probe_offset %}    # Need to subtract increment here; the variable only gets updated after an increment has passed
    {% set fl2y = svv.fl2y - sin45*increment - y_probe_offset %}
    {% set br2x = svv.br2x + sin45*increment - x_probe_offset %}    # Need to add increment here; the variable only gets updated after an increment has passed
    {% set br2y = svv.br2y + sin45*increment - y_probe_offset %}
    {% set r1 = (fl2x**2 + fl2y**2)**0.5 - fl_sensor_radius %}
    {% set r2 = (br2x**2 + br2y**2)**0.5 - br_sensor_radius %}
    {% set delta_diag = (r2-r1)/2.0 %}
    {% set x_offset = sin45*delta_diag %}
    {% set y_offset = sin45*delta_diag %}
    {% set move_speed = svv.move_speed %}

    SAVE_VARIABLE VARIABLE=x_correction_4 VALUE={sin45*delta_diag}
    SAVE_VARIABLE VARIABLE=y_correction_4 VALUE={sin45*delta_diag}

    SAVE_VARIABLE VARIABLE=r1_4 VALUE={r1}
    SAVE_VARIABLE VARIABLE=r2_4 VALUE={r2}

    #RESPOND MSG="r1: {r1}"
    #RESPOND MSG="r2: {r2}"
    #RESPOND MSG="diag_correction_4: {delta_diag}"

    G90
    G0 F{move_speed*60} Z6.0
    G0 F{move_speed*60} X{x_offset} Y{y_offset}
    SET_KINEMATIC_POSITION X=0.0 Y=0.0

[gcode_macro INITIAL_DIAG_CENTRALIZE]
gcode:

    {% set svv = printer.save_variables.variables %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set x_correction_0 = svv.x_correction_0 %}
    {% set y_correction_0 = svv.y_correction_0 %}    
    {% set x_correction_1 = svv.x_correction_1 %}
    {% set y_correction_1 = svv.y_correction_1 %}
    {% set x_correction_2 = svv.x_correction_2 %}
    {% set y_correction_2 = svv.y_correction_2 %}
    {% set x_correction_3 = svv.x_correction_3 %}
    {% set y_correction_3 = svv.y_correction_3 %}
    {% set x_correction_4 = svv.x_correction_4 %}
    {% set y_correction_4 = svv.y_correction_4 %}
    {% set x_correction_total = x_correction_0 - x_correction_1 + x_correction_2 - x_correction_3 + x_correction_4 %}
    {% set y_correction_total = y_correction_0 + y_correction_1 + y_correction_2 + y_correction_3 + y_correction_4 %}
    {% set x_correction_total_negative = -x_correction_total %}
    {% set y_correction_total_negative = -y_correction_total %}
    {% set move_speed = svv.move_speed %}

    #G0 F{move_speed*60} Z6.0
    #G0 F{move_speed*60} X{x_correction_total_negative} Y{y_correction_total_negative}
    #SET_KINEMATIC_POSITION X=0.0 Y=0.0
    G28
    SET_GCODE_OFFSET X={x_correction_total} Y={y_correction_total}

    SAVE_VARIABLE VARIABLE=x_correction_total VALUE={x_correction_total}
    SAVE_VARIABLE VARIABLE=y_correction_total VALUE={y_correction_total}

    RESPOND MSG="x_correction_total: {x_correction_total}"
    RESPOND MSG="y_correction_total: {y_correction_total}"
    RESPOND MSG="Diagonally Centralized"

[gcode_macro DIAG_CENTRALIZE]
gcode:

    {% set svv = printer.save_variables.variables %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set x_correction_0 = svv.x_correction_0 %}
    {% set y_correction_0 = svv.y_correction_0 %}    
    {% set x_correction_1 = svv.x_correction_1 %}
    {% set y_correction_1 = svv.y_correction_1 %}
    {% set x_correction_2 = svv.x_correction_2 %}
    {% set y_correction_2 = svv.y_correction_2 %}
    {% set x_correction_3 = svv.x_correction_3 %}
    {% set y_correction_3 = svv.y_correction_3 %}
    {% set x_correction_4 = svv.x_correction_4 %}
    {% set y_correction_4 = svv.y_correction_4 %}
    {% set x_correction_total = x_correction_0 - x_correction_1 + x_correction_2 - x_correction_3 + x_correction_4 + 0.3937 %}
    {% set y_correction_total = y_correction_0 + y_correction_1 + y_correction_2 + y_correction_3 + y_correction_4 - 0.1143 %}
    {% set x_correction_total_negative = -x_correction_total %}
    {% set y_correction_total_negative = -y_correction_total %}
    {% set move_speed = svv.move_speed %}

    #G0 F{move_speed*60} Z6.0
    #G0 F{move_speed*60} X{x_correction_total_negative} Y{y_correction_total_negative}
    #SET_KINEMATIC_POSITION X=0.0 Y=0.0
    SET_GCODE_OFFSET X={x_correction_total} Y={y_correction_total}

    SAVE_VARIABLE VARIABLE=x_correction_total VALUE={x_correction_total}
    SAVE_VARIABLE VARIABLE=y_correction_total VALUE={y_correction_total}

    RESPOND MSG="x_correction_total: {x_correction_total}"
    RESPOND MSG="y_correction_total: {y_correction_total}"
    RESPOND MSG="Diagonally Centralized"

[gcode_macro MANUAL_CENTRALIZE]
gcode:

    {% set svv = printer.save_variables.variables %}
    {% set x_correction_total = svv.x_correction_total %}
    {% set y_correction_total = svv.y_correction_total %}
    {% set x_offset_total = x_correction_total + 0.3556 - 0.1334 - 0.2096 %}
    {% set y_offset_total = y_correction_total - 0.2985 + 0.7112 - 0.3556 + 0.0381 %}
    {% set move_speed = svv.move_speed %}

    SET_GCODE_OFFSET X={x_offset_total} Y={y_offset_total}
    G0 F{move_speed*60} Z6.0
    G0 F{move_speed*60} X0.0 Y0.0
    SET_KINEMATIC_POSITION X=0.0 Y=0.0
    SET_GCODE_OFFSET X=0.0 Y=0.0

    RESPOND MSG="Manually Centralized"

### SENSOR RADIUS MACROS
[gcode_macro PROBE_STATE_FL]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.fl_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=fl_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=flx VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=fly VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_FL]
description: Get XY coordinates of Front-Left point
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set tiny_start_radius = svv.tiny_start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set flx_starting_position = -sin45*tiny_start_radius + x_probe_offset %}
    {% set fly_starting_position = -sin45*tiny_start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %} # Subtract the difference in build surface thicknesses
    {% set tiny_max_distance = svv.tiny_max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = sin45*increment %}
    {% set y_increment = sin45*increment %}

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G0 F{move_speed*60} X{flx_starting_position} Y{fly_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update flx and fly variables when probe is triggered
    {% for _ in range(0, (tiny_max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_FL
        PROBE_STATE_FL
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=fl_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_BR]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.br_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=br_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=brx VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=bry VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_BR]
description: Get XY coordinates of Back-Right point
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set tiny_start_radius = svv.tiny_start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set brx_starting_position = sin45*tiny_start_radius + x_probe_offset %}
    {% set bry_starting_position = sin45*tiny_start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set tiny_max_distance = svv.tiny_max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = -(sin45*increment) %}
    {% set y_increment = -(sin45*increment) %}
    

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    #G91 # Set to relative positioning
    #MANUAL_STEPPER STEPPER=stepper_a MOVE=180.0 SPEED=15.0 SYNC=1            # Rotate Build Surface 180 Degrees
    #G90  # Set back to absolute positioning
    G0 F{move_speed*60} X{brx_starting_position} Y{bry_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update br0x and br0y variables when probe is triggered
    {% for _ in range(0, (tiny_max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_BR
        PROBE_STATE_BR
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=br_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_FR]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.fr_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=fr_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=frx VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=fry VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_FR]
description: Get XY coordinates of Front-Right point
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set tiny_start_radius = svv.tiny_start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set frx_starting_position = sin45*tiny_start_radius + x_probe_offset %}
    {% set fry_starting_position = -sin45*tiny_start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set tiny_max_distance = svv.tiny_max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = -(sin45*increment) %}
    {% set y_increment = sin45*increment %}

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    G0 F{move_speed*60} X{frx_starting_position} Y{fry_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (tiny_max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_FR
        PROBE_STATE_FR
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=fr_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro PROBE_STATE_BL]
gcode:
    
    # Query the probe multiple times to ensure consistent reading
    QUERY_PROBE
    M400
    QUERY_PROBE
    M400
    
    # Update the state based on last_query
    {% if printer.probe.last_query %}
        {% if printer.save_variables.variables.bl_obtained != 1 %}
            SAVE_VARIABLE VARIABLE=bl_obtained VALUE={1}
            SAVE_VARIABLE VARIABLE=blx VALUE={printer.toolhead.position.x} # SAVE THE CURRENT X POSITION TO A VARIABLE
            SAVE_VARIABLE VARIABLE=bly VALUE={printer.toolhead.position.y} # SAVE THE CURRENT Y POSITION TO A VARIABLE
            RESPOND MSG="X Probe Trigger Position: {printer.toolhead.position.x}"
            RESPOND MSG="Y Probe Trigger Position: {printer.toolhead.position.y}"
        {% endif %}
    {% endif %}

[gcode_macro GET_BL]
description: Get XY coordinates of Back-Left point
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set tiny_start_radius = svv.tiny_start_radius %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set blx_starting_position = -sin45*tiny_start_radius + x_probe_offset %}
    {% set bly_starting_position = sin45*tiny_start_radius + y_probe_offset %}
    {% set z_probe_height = svv.z_probe_height %}
    {% set tiny_max_distance = svv.tiny_max_distance %}  # Max distance the printhead will move while probing
    {% set move_speed = svv.move_speed %}      # Movement speed while probing in mm/s
    {% set increment = svv.increment %}        # How far to move the axis before checking if probe has been activated
    {% set x_increment = sin45*increment %}
    {% set y_increment = -(sin45*increment) %}
    

    G0 F{move_speed*60} Z6.0                                                 # Lift Z up
    #G91 # Set to relative positioning
    #MANUAL_STEPPER STEPPER=stepper_a MOVE=0.0 SPEED=15.0 SYNC=1            # Rotate Build Surface 180 Degrees
    #G90  # Set back to absolute positioning
    G0 F{move_speed*60} X{blx_starting_position} Y{bly_starting_position}    # Position inductive probe
    G0 F{move_speed*60} Z{z_probe_height}                                    # Drop Z down to within sensor range

    # Move diagonally & update variables when probe is triggered
    {% for _ in range(0, (tiny_max_distance / increment)|int) %}
        # Check if probe is triggered
        PROBE_STATE_BL
        PROBE_STATE_BL
        # Move diagonally by a single increment
        G91 # Set to relative positioning
        G0 F{move_speed*60} X{x_increment} Y{y_increment}  # Move diagonally by increment distance
        G90  # Set back to absolute positioning
    {% endfor %}

    G0 F{move_speed*60} Z10.0 # Move Z up so the probe can be queried between GET commands
    
    SAVE_VARIABLE VARIABLE=bl_obtained VALUE={0} # Reset this flag to zero for next time

[gcode_macro CALCULATE_SENSOR_DIAG_RADII]
gcode:
    
    # Calculate diagonal correction:
    {% set svv = printer.save_variables.variables %}
    {% set sin45 = svv.sin45 %}
    {% set increment = svv.increment %}
    {% set x_probe_offset = svv.x_probe_offset %}
    {% set y_probe_offset = svv.y_probe_offset %}
    {% set perfect_circle_radius = svv.perfect_circle_radius %}
    {% set flx = svv.flx - sin45*increment - x_probe_offset %}
    {% set fly = svv.fly - sin45*increment - y_probe_offset %}
    {% set brx = svv.brx + sin45*increment - x_probe_offset %}
    {% set bry = svv.bry + sin45*increment - y_probe_offset %}
    {% set ra = (flx**2 + fly**2)**0.5 %}
    {% set rb = (brx**2 + bry**2)**0.5 %}
    {% set fl_sensor_radius = ra - perfect_circle_radius %} # Sensor radius when approaching target (build surface) from the front-left
    {% set br_sensor_radius = rb - perfect_circle_radius %} # Sensor radius when approaching target from the back-right

    {% set frx = svv.frx + sin45*increment - x_probe_offset %}
    {% set fry = svv.fry - sin45*increment - y_probe_offset %}
    {% set blx = svv.blx - sin45*increment - x_probe_offset %}
    {% set bly = svv.bly + sin45*increment - y_probe_offset %}
    {% set rc = (frx**2 + fry**2)**0.5 %}
    {% set rd = (blx**2 + bly**2)**0.5 %}
    {% set fr_sensor_radius = rc - perfect_circle_radius %} # Sensor radius when approaching target from the front-right
    {% set bl_sensor_radius = rd - perfect_circle_radius %} # Sensor radius when approaching target from the back-left

    SAVE_VARIABLE VARIABLE=fl_sensor_radius VALUE={fl_sensor_radius}
    SAVE_VARIABLE VARIABLE=br_sensor_radius VALUE={br_sensor_radius}
    SAVE_VARIABLE VARIABLE=fr_sensor_radius VALUE={fr_sensor_radius}
    SAVE_VARIABLE VARIABLE=bl_sensor_radius VALUE={bl_sensor_radius}

    RESPOND MSG="fl_sensor_radius: {fl_sensor_radius}"
    RESPOND MSG="br_sensor_radius: {br_sensor_radius}"
    RESPOND MSG="fr_sensor_radius: {fr_sensor_radius}"
    RESPOND MSG="bl_sensor_radius: {bl_sensor_radius}"

[z_tilt]
##  Use Z_TILT_ADJUST to level the bed
##  z_positions: Location of toolhead

## Uncomment below for 300mm build
z_positions:
   -200, -342.5
   0, 117.5
   200, -342.5
points:
   -50, -86.6
   0, 100
   50, -86.6

horizontal_move_z: 10
